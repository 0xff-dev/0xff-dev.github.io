<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>字符串修改</title>
      <link href="/2019/04/15/1/"/>
      <url>/2019/04/15/1/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;<code>Leetcode</code> 编辑字符串使用最少的步数让两个字符串相同. 自己之前遇到过没有做，今天做了总结一下.<br><a id="more"></a></p><h2 id="Edit-Distance"><a href="#Edit-Distance" class="headerlink" title="Edit Distance"></a>Edit Distance</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>Given two words <code>word1</code> and <code>word2</code>, find the minimum number of operations required to convert <code>word1</code> to <code>word2</code>.<br>You have the following 3 operations permitted on a word:</p><ol><li>Insert a character</li><li>Delete a character</li><li>Replace a character</li></ol></blockquote><h3 id="输入用例"><a href="#输入用例" class="headerlink" title="输入用例"></a>输入用例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: word1 = &quot;horse&quot;, word2 = &quot;ros&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">horse -&gt; rorse (replace &apos;h&apos; with &apos;r&apos;)</span><br><span class="line">rorse -&gt; rose (remove &apos;r&apos;)</span><br><span class="line">rose -&gt; ros (remove &apos;e&apos;)</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><blockquote><p>使用动态规划来解决，<code>dp[i][j]</code> 含义是word1前i个字符变成word2前j个字符所需的最小步数.<br>由此我们可以得出状态转移方程:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当word1[i] == word2[j]的时候 dp[i][j] = dp[i-1][j-1] 不需要操作</span><br><span class="line">当word1[i] != word2[j]的时候 dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])+1寻找最细哦啊的操作步骤</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minDistance</span><span class="params">(word1 <span class="keyword">string</span>, word2 <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">w1, w2 := <span class="built_in">len</span>(word1), <span class="built_in">len</span>(word2)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(word2) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> w1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(word1) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> w2</span><br><span class="line">&#125;</span><br><span class="line">dp := <span class="built_in">make</span>([][]<span class="keyword">int</span>, w1+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; w1+<span class="number">1</span>; i++ &#123;</span><br><span class="line">dp[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, w2+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 初始化dp</span></span><br><span class="line">    <span class="comment">// word1与长度为0的word2做匹配的时候所需的步数.</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; w1+<span class="number">1</span>; i++ &#123;</span><br><span class="line">dp[i][<span class="number">0</span>] = i</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// word1长度为0与word2进行匹配所需的步数</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; w2+<span class="number">1</span>; i++ &#123;</span><br><span class="line">dp[<span class="number">0</span>][i] = i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= w1; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= w2; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> word1[i<span class="number">-1</span>] == word2[j<span class="number">-1</span>] &#123;</span><br><span class="line">dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">dp[i][j] = min(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>], dp[i<span class="number">-1</span>][j<span class="number">-1</span>])+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[w1][w2]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(args ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">minNum := args[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(args); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> args[i] &lt; minNum &#123;</span><br><span class="line">minNum = args[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> minNum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="To-sum-up"><a href="#To-sum-up" class="headerlink" title="To sum up"></a>To sum up</h2><blockquote><p>在做本题的时候自己想到的是类似最长公共子序列的求解，但是疏忽了不想等的时更新dp的规则，以及初始化的问题。<br>最终参考了<a href="http://hs-yeah.github.io/acm/2014/07/16/01-HNUOJ-10411" target="_blank" rel="noopener">ACM 题目：字符串的修改</a>使得此题解决。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LRUCache(最近最久未使用算法)题解</title>
      <link href="/2019/04/12/2/"/>
      <url>/2019/04/12/2/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;<code>Leetcode</code> 最近最久未使用算法设计与实现. 主要的思想是双向链表配合<code>map</code>, 以空间换时间.<br><a id="more"></a></p><h2 id="LRUCache"><a href="#LRUCache" class="headerlink" title="LRUCache"></a>LRUCache</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>Design and implement a data structure for <code>Least Recently Used (LRU) cache</code>. It should support the following operations: <code>get</code> and <code>put</code>.</p></blockquote><h3 id="进一步优化"><a href="#进一步优化" class="headerlink" title="进一步优化"></a>进一步优化</h3><blockquote><p>Could you do both operations in <code>O(1)</code> time complexity?</p></blockquote><h3 id="输入输出例子"><a href="#输入输出例子" class="headerlink" title="输入输出例子"></a>输入输出例子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LRUCache cache = new LRUCache( 2 /* capacity */ );</span><br><span class="line"></span><br><span class="line">cache.put(1, 1);</span><br><span class="line">cache.put(2, 2);</span><br><span class="line">cache.get(1);       // returns 1</span><br><span class="line">cache.put(3, 3);    // evicts key 2</span><br><span class="line">cache.get(2);       // returns -1 (not found)</span><br><span class="line">cache.put(4, 4);    // evicts key 1</span><br><span class="line">cache.get(1);       // returns -1 (not found)</span><br><span class="line">cache.get(3);       // returns 3</span><br><span class="line">cache.get(4);       // returns 4</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><blockquote><p>一个固定的空间, 当访问的页面在内存中的时候，把该页面的位置提到开始的位置，<br>当访问的页面不再内存的时候，就要考虑替换页面, 如果空间足够，可以直接把该页面放在开始的位置, 如果空间不够<br>那么在内存中去掉最后一个页面，再把需要的页面放在开始的位置。所以考虑<code>插入的位置</code>, 以及需要很快的访问到某个页面.<br>选择的数据结构是<code>双向链表</code>, 用<code>map</code>存储页面以达到开快速访问. 双向链表保留<code>头尾指针</code>.</p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// O(1) 常量时间, 考虑一个存值的数组， 一个Left, Right数字代表左右子数</span></span><br><span class="line"><span class="keyword">package</span> LRUCache</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LRUCache <span class="keyword">struct</span> &#123;</span><br><span class="line">Size   <span class="keyword">int</span></span><br><span class="line">Length <span class="keyword">int</span></span><br><span class="line">Head   *Node</span><br><span class="line">Tail   *Node</span><br><span class="line">Nodess <span class="keyword">map</span>[<span class="keyword">int</span>]*Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">Key, Value <span class="keyword">int</span></span><br><span class="line">Left       *Node</span><br><span class="line">Right      *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">(capacity <span class="keyword">int</span>)</span> <span class="title">LRUCache</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> LRUCache&#123;Size: capacity, Length: <span class="number">0</span>, Head: <span class="literal">nil</span>, Tail: <span class="literal">nil</span>, Nodess: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]*Node)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LRUCache)</span> <span class="title">Get</span><span class="params">(key <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> this.Head == <span class="literal">nil</span> &#123;</span><br><span class="line">this.Nodess[key] = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> res, _ := this.Nodess[key]; res != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> res.Left == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res.Value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> res.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">res.Left.Right = res.Right</span><br><span class="line">res.Right.Left = res.Left</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">this.Tail = this.Tail.Left</span><br><span class="line">this.Tail.Right = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">res.Right = this.Head</span><br><span class="line">this.Head.Left = res</span><br><span class="line">this.Head = res</span><br><span class="line">this.Head.Left = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span> res.Value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LRUCache)</span> <span class="title">Put</span><span class="params">(key <span class="keyword">int</span>, value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> res := this.Get(key); res != <span class="number">-1</span>&#123;</span><br><span class="line"><span class="comment">// key是存在的, 更新key</span></span><br><span class="line">this.Nodess[key].Value = value</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">node := &amp;Node&#123;key, value, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line"><span class="keyword">if</span> this.Length &lt; this.Size &#123;</span><br><span class="line"><span class="keyword">if</span> this.Head == <span class="literal">nil</span> &#123;</span><br><span class="line">this.Head = node</span><br><span class="line">this.Tail = node</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">node.Right = this.Head</span><br><span class="line">this.Head.Left = node</span><br><span class="line">this.Head = node</span><br><span class="line">&#125;</span><br><span class="line">this.Length++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">node.Right = this.Head</span><br><span class="line">this.Head.Left = node</span><br><span class="line">this.Head = node</span><br><span class="line"><span class="built_in">delete</span>(this.Nodess, this.Tail.Key)</span><br><span class="line">this.Tail = this.Tail.Left</span><br><span class="line">this.Tail.Right = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">this.Nodess[key] = node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="To-sum-up"><a href="#To-sum-up" class="headerlink" title="To sum up"></a>To sum up</h2><blockquote><p>首先要熟悉页面调度算法<code>LRU</code>的原理, 一个固定的空间, 当访问的页面在内存中的时候，把该页面的位置提到开始的位置，<br>当访问的页面不再内存的时候，就要考虑替换页面, 如果空间足够，可以直接把该页面放在开始的位置，考虑采用什么样的数据结构能够很快速的完成<code>get</code>, <code>put</code>操作, </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/04/12/1/"/>
      <url>/2019/04/12/1/</url>
      
        <content type="html"><![CDATA[<p>Hello World 文章摘要<br><a id="more"></a></p><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hello </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
